import torch
import matplotlib.pyplot as plt
from IPython import display
import numpy as np


# 设置随机数种子，保证在不同计算机上运行时下面的输出一致

torch.manual_seed(1000)


def get_fake_data(batch_size=8):

    x = torch.rand(batch_size, 1) * 20      # 产生随机数据：y=x*2+3，加上一些噪声
    y = x*2 + (1 + torch.randn(batch_size, 1))*3
    return x, y

# 看看产生的x，y分布


x, y = get_fake_data(batch_size=8)
plt.scatter(x.squeeze().numpy(), y.squeeze().numpy())  # 不加.squeeze()也可以，只是为了确保是标量
plt.show()

# 随机初始化参数

w = torch.rand(1, 1)
z = torch.arange(0, 20)

'''print(w.dtype, z.dtype): 两个类型不同    '''

b = torch.zeros(1, 1)
lr = 0.001

for ii in range(20000):
    x, y = get_fake_data()
    # 显示随机取得8个点
    plt.scatter(x.squeeze().numpy(), y.squeeze().numpy())  # 不加.squeeze()也可以，只是为了确保是标量
    plt.show()


    # forward:计算loss
    print('x.size, x.dtype', x.size(), x.dtype)
    print('w.size, w.dtype', w.size(), w.dtype)
    print('b.size, b.dtype', b.size(), b.dtype)
    print('y.size, y.dtype', y.size(), y.dtype)
    '''b.expand_as(x)：将b转化为与x同样大小（b为[1,1]，但如果b是[8,1],无法将其转化为比如[20,1]这种尺寸)
    X = x.mm(w)
    print('B.size, B.dtype', b.size(), b.dtype)
    print('X.size, X.dtype', X.size(), X.dtype) '''
    
    # 预测直线
    y_pred = x.mm(w) + b.expand_as(y)
    loss = 0.5 * (y_pred - y) ** 2    # 均方误差
    loss = loss.sum()

    # backward：手动计算梯度
    dloss = 1
    dy_pred = dloss * (y_pred - y)

    dw = x.t().mm(dy_pred)
    db = dy_pred.sum()

    # 更新参数
    w.sub_(lr * dw)
    b.sub_(lr * db)

    if ii % 1000 == 0:
        display.clear_output(wait=True)
        print('x.size, w.size, x.dtype, w.dtype', x.size(),  w.size(), x.dtype, w.dtype)
        # b = b.expand_as(x)
        # print('b.size, b.dtype', b.size(), b.dtype)

        # 下面有问题，因为arange是int64， w是float32 。
        # 用三种方法将张量类型转换

        '''方法一：
        # x_int = torch.arange(0, 20)
        # x_float = x_int.float()
        # x = x_float.view(-1, 1)
        # print('x.size,  x.dtype', x.size(),  x.dtype)
        '''

        '''方法二：x = np.arange(0, 20).astype(np.float32)
         x = torch.from_numpy(x)
         方法三：x = np.arange(0, 20, dtype=torch.float)不行'''
        x = np.arange(0, 20).astype(np.float32)
        x = torch.from_numpy(x).view(-1, 1)

        print('x.size,  x.dtype', x.size(), x.dtype)
        print('b.size, b.dtype', b.size(), b.dtype)
        # b.expand_as(x)：将b转化为与x同样大小
        # print()可以打印转换后的类型及大小
        # 学习了一次之后新参数下的直线，显示学习一次后的新参数 b，w

        print('w', w, w.dtype, 'b', b,  b.dtype)
        y = x.mm(w) + b.expand_as(x)

        # 显示学习后的直线
        plt.plot(x.numpy(), y.numpy())  # predicted

        # 再从中随便取20个点的图像
        # x2, y2 = get_fake_data(batch_size=20)
        # plt.scatter(x2.numpy(), y2.numpy())   # true data

        plt.xlim(0, 20)
        plt.ylim(0, 41)
        plt.show()
        # plt.pause(1)
    '''print(w.squeeze()[0], b.squeeze()[0]) 此处直接为标量，无法squeeze'''

'''下面展示学习n次后的逼近直线与随机出现20个点的逼近程度'''
plt.plot(x.numpy(), y.numpy())
x2, y2 = get_fake_data(batch_size=20)
plt.scatter(x2.numpy(), y2.numpy())   # true data
plt.show()

print('w', w, w.size(), w.dtype, 'b', b, b.size(), b.dtype)
print(b.item(), w.item())   # 此时，回归学习到 w=1.878 b=3.027






